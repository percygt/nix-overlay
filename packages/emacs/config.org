#+TITLE: PercyGT' Emacs Config

* Core
** Remove bar mode
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(tool-bar-mode -1)

(setq use-short-answers t)

(setq ring-bell-function 'ignore)
(setq-default indent-tabs-mode nil)
#+end_src

** Theme and font
#+begin_src emacs-lisp :tangle yes
(load-theme 'modus-operandi-tinted t)

(set-face-attribute 'default nil
  :family "VictorMono Nerd Font"
  :width 'normal
  :weight 'normal)
#+end_src

** Backups
#+begin_src emacs-lisp :tangle yes
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist '(("." . "~/.saves/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)
#+end_src

** Background opacity
Remove background on terminal, and add transparency on GUI
#+begin_src emacs-lisp :tangle yes
(defun on-after-init ()
  (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))

(add-hook 'window-setup-hook 'on-after-init)
(set-frame-parameter nil 'alpha-background 70)
(add-to-list 'default-frame-alist '(alpha-background . 70))
#+end_src

* Utility
** All the Icons
Works through nixosModules.
#+begin_src emacs-lisp :tangle yes
(use-package all-the-icons
  :if (and (display-graphic-p) @isnixosmodule@))

(use-package all-the-icons-completion
  :if (and (display-graphic-p) @isnixosmodule@)
  :after all-the-icons
  :hook (marginalia-mode . all-the-icons-completion-mode))
#+end_src
** Direnv
To integrate with nix shells.
#+begin_src emacs-lisp :tangle yes
(use-package direnv
  :custom (direnv-always-show-summary nil)
  :config (direnv-mode))
#+end_src
** Magit
Configurations for magit
*** Use Magit
#+begin_src emacs-lisp :tangle yes
(use-package magit
  :custom (magit-process-finish-apply-ansi-colors t))
#+end_src
** Vertico, Orderless, Marginalia
Pretty minibuffer support
#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :config (vertico-mode))

  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles basic partial-completion)))))

  (use-package marginalia
    :config (marginalia-mode))

  (use-package ctrlf
    :config (ctrlf-mode +1))
#+end_src
** Helpful and which key
Better help defaults
#+begin_src emacs-lisp :tangle yes
(use-package helpful
  :config (global-set-key (kbd "C-h f") #'helpful-callable)
  :config (global-set-key (kbd "C-h v") #'helpful-variable)
  :config (global-set-key (kbd "C-h x") #'helpful-command))

(use-package which-key
  :config (which-key-mode))
#+end_src
** Windows
I wanna test out =winner-mode=
#+begin_src emacs-lisp
(use-package winner-mode
  :config (winner-mode))
#+end_src
** Bind key
#+begin_src emacs-lisp :tangle yes
(use-package bind-key)
#+end_src
** Eglot
Language server support. Already comes installed but used to configure additional language servers.
#+begin_src emacs-lisp :tangle yes
(use-package eglot
  :config (add-to-list 'eglot-server-programs '(nix-mode . ("nil"))))
#+end_src

** Corfu
Completion popup system
#+begin_src emacs-lisp :tangle yes
(use-package corfu
  :config (global-corfu-mode)
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-separator ?\s)
  (corfu-quit-no-match t))
#+end_src
** Vterm
#+begin_src emacs-lisp :tangle yes
(use-package vterm)
#+end_src
** Compilation
Add support for ansi escape codes in compilation
#+begin_src emacs-lisp :tangle yes
(use-package ansi-color
  :hook (compilation-filter . ansi-color-compilation-filter))
#+end_src
** TODO Exwm
#+begin_src emacs-lisp :tangle yes
(use-package exwm
  :config
  :disable t
  (setq exwm-workspace-number 9)
  (add-hook 'exwm-update-class-hook
          (lambda ()
          (exwm-workspace-rename-buffer exwm-class-name)))
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist '((1 . "DP-1") (2 . "HDMI-1")))
  (add-hook 'exwm-randr-screen-change-hook
          (lambda ()
            (start-process-shell-command
             "xrandr" nil "xrandr --output DP-1 --mode 2560x1080 --rate 75.00 --pos 0x1080 --output HDMI-1 --mode 1920x1080 --pos 320x0")))
  (require 'exwm-systemtray)
  (exwm-systemtray-enable))
#+end_src
* Languages
I try to mostly use the new Treesitter modes, which comes builtin with the new emacs 29.
** Python
The package already comes builtin, so we only instantiate it to define the hooks and remap the default package for the new one.

It also relies on python lsp server with builtin ruff support.
#+begin_src emacs-lisp :tangle yes
(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(add-hook 'python-ts-mode-hook #'eglot-ensure)
#+end_src

** Nix
#+begin_src emacs-lisp :tangle yes
(use-package nix-mode
  :hook (nix-mode . eglot-ensure))
#+end_src
** Rust
Try to use the package.
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
(add-hook 'rust-ts-mode-hook #'eglot-ensure)

(setq rust-ts-mode-indent-offset 2)
#+end_src

** Markdown
#+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :mode "\\.md\\'")
#+end_src
* Personal
** RSS reader
#+begin_src emacs-lisp :tangle yes
(use-package elfeed
  :bind ("C-c r e" . elfeed)
  :custom
  (elfeed-feeds '("https://planet.emacslife.com/atom.xml"
                  "https://fasterthanli.me/index.xml"
                  "https://nullprogram.com/feed/"
                  "https://without.boats/index.xml"
                  "https://smallcultfollowing.com/babysteps/atom.xml"
                  "https://surma.dev/index.xml")))
#+end_src

** Org mode and agenda.
#+begin_src emacs-lisp :tangle yes
(use-package org
  :hook (org-mode . org-indent-mode)
  :bind ("C-c a" . org-agenda)
  :custom
  (org-ellipsis " â€¦")
  (org-hide-emphasis-markers nil)
  (org-fontify-quote-and-verse-blocks t)
  (org-image-actual-width nil)
  (org-indirect-buffer-display 'other-window)
  (org-confirm-babel-evaluate nil)
  (org-edit-src-content-indentation 0)
  (org-agenda-files '("~/agenda.org"))
  (org-agenda-window-setup 'current-window)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-block-separator nil)
  (org-agenda-sticky t)
  (org-agenda-time-grid
      '((daily today require-timed)
        ()
        "......" "----------------"))
  ;; :config
  ;; (when (display-graphic-p)
  ;;     (setq org-agenda-category-icon-alist
  ;;      `(
  ;; 	 ("Trabalho" ,(list (all-the-icons-material "work")) nil nil :ascent center)
  ;; 	 ("Pessoal" ,(list (all-the-icons-material "account_box")) nil nil :ascent center)
  ;; 	 ("Faculdade" ,(list (all-the-icons-material "school")) nil nil :ascent center))))
  )
#+end_src
** Email
Trying to use mu4e
#+begin_src emacs-lisp :tangle yes
(setq epg-pinentry-mode 'loopback)
#+end_src
Helper functions, to try to discover which mail pertains to which account.
#+begin_src emacs-lisp :tangle yes
(defun personal-p (msg)
  (string-prefix-p "/personal/" (mu4e-message-field msg :maildir)))
(defun university-p (msg)
  (string-prefix-p "/university/" (mu4e-message-field msg :maildir)))
(defun work-p (msg)
  (string-prefix-p "/work/" (mu4e-message-field msg :maildir)))
#+end_src
Actual mu4e definition
#+begin_src emacs-lisp :tangle yes
(use-package mu4e
  :bind ("C-c m" . mu4e)
  :custom
  (read-mail-command 'mu4e)
  (mu4e-index-cleanup nil)
  (mu4e-index-lazy-check t)
  (mu4e-use-fancy-chars (display-graphic-p))
  (mu4e-confirm-quit nil)
  (mu4e-change-filenames-when-moving t)
  (mu4e-update-interval (* 5 60))
  (mu4e-get-mail-command "parallel mbsync ::: personal work university")
  (mu4e-headers-fields
   '((:human-date . 10)
     (:flags . 6)
     (:topic . 10)
     (:from-or-to . 22)
     (:subject . nil)))
  (mu4e-drafts-folder (lambda (msg)
                        (cond
                         ((personal-p msg)   "/personal/[Gmail]/Rascunhos")
                         ((university-p msg) "/university/[Gmail]/Rascunhos")
                         ((work-p msg)       "/work/[Gmail]/Drafts"))))
  (mu4e-sent-folder (lambda (msg)
                      (cond
                       ((personal-p msg)   "/personal/[Gmail]/Enviados")
                       ((university-p msg) "/university/[Gmail]/Enviados")
                       ((work-p msg)       "/work/[Gmail]/Sent"))))
  (mu4e-refile-folder (lambda (msg)
                        (cond
                         ((personal-p msg)   "/personal/[Gmail]/'Todos os e-mails'")
                         ((university-p msg) "/university/[Gmail]/'Todos os e-mails'")
                         ((work-p msg)       "/work/[Gmail]/'All mail'"))))
  (mu4e-trash-folder  (lambda (msg)
                        (cond
                         ((personal-p msg)   "/personal/[Gmail]/Lixeira")
                         ((university-p msg) "/university/[Gmail]/Lixeira")
                         ((work-p msg)       "/work/[Gmail]/Trash"))))
  :config
  (add-to-list 'mu4e-bookmarks
               '(:name "Inboxes"
                 :query "m:/personal/Inbox OR m:/work/Inbox OR m:/university/Inbox"
                 :key ?i))
  (add-to-list 'mu4e-header-info-custom
               '(:topic
                 :name "Topic"
                 :shortname "Topic"
                 :function (lambda (msg)
                             (cond
                              ((personal-p msg)   "Personal")
                              ((university-p msg) "University")
                              ((work-p msg)       "Work"))))))
#+end_src
